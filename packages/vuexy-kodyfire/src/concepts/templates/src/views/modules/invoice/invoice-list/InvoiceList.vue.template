<template>

  <!-- Table Container Card -->
  <b-card
    no-body
  >

    <div class="m-2">

      <!-- Table Top -->
      <b-row>

        <!-- Per Page -->
        <b-col
          cols="12"
          md="6"
          class="d-flex align-items-center justify-content-start mb-1 mb-md-0"
        >
          <label>سجلات</label>
          <v-select
            v-model="perPage"
            :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
            :options="perPageOptions"
            :clearable="false"
            class="per-page-selector d-inline-block ml-50 mr-1"
          />
          <b-button
            variant="primary"
            :to="{ name: 'invoices-add'}"
          >
            أضف فاتورة جديدة
          </b-button>
        </b-col>

        <!-- Search -->
        <b-col
          cols="12"
          md="6"
        >
          <div class="d-flex align-items-center justify-content-end">
            <b-form-input
              v-model="searchQuery"
              class="d-inline-block mr-1"
              placeholder="بحث..."
            />
            <v-select
              v-model="statusFilter"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="statusOptions"
              class="invoice-filter-select"
              placeholder="حدد الحالة"
            >
              <template #selected-option="{ label }">
                <span class="text-truncate overflow-hidden">
                  {{ label }}
                </span>
              </template>
            </v-select>
          </div>
        </b-col>
      </b-row>

    </div>

    <b-table
      ref="refInvoiceListTable"
      :items="fetchInvoices"
      responsive
      :fields="tableColumns"
      primary-key="id"
      :sort-by.sync="sortBy"
      show-empty
      empty-text="لم يتم العثور على سجلات مطابقة"
      :sort-desc.sync="isSortDirDesc"
      class="position-relative"
    >
      <%=#each data.columns %>
      <!-- Column: <%= name %> -->
        <%=#ifEquals type 'link' %>
        <%=!-- Column: type link  --%>
      <template #cell(<%= name %>)="data">
        <b-link
          :to="{<%= link %>}"
          class="font-weight-bold"
        >
          #{{ data.value }}
        </b-link>
      </template>
        <%=/ifEquals %>
        <%=#ifEquals type 'text' %>
 <%=!-- Column: type text  --%>
      <template #cell(<%= name %>)="data">
        <span class="text-nowrap">
          {{ data.value }}
        </span>
      </template>
      <%=/ifEquals %>
        <%=#ifEquals type 'user' %>
        <%=!-- Column: type user  --%>
        <template #cell(<%= name %>)="data">
          <b-media vertical-align="center">
            <template #aside>
              <b-avatar
                size="32"
                :src="data.item.avatar"
                :text="avatarText(data.item.<%= name %>)"
                :variant="`light-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
                :to="{ name: '<%= name %>-view', params: { id: data.item.id } }"
              />
            </template>
            <b-link
              :to="{ name: '<%= name %>-view', params: { id: data.item.id } }"
              class="font-weight-bold d-block text-nowrap"
            >
              {{ data.item.name }}
            </b-link>
            <small class="text-muted">@{{ data.item.email }}</small>
          </b-media>
        </template>
        <%=/ifEquals %>

        <%=#ifEquals type 'icon' %>
         <%=!-- Column: type icon --%>
        <template #cell(<%= name %>)="data">
          <div class="text-nowrap">
            <feather-icon
              :icon="resolve<%= classify ../name %><%= classify name %>Icon(data.item.<%= name %>)"
              size="18"
              class="mr-50"
              :class="`text-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
            />
            <span class="align-text-top text-capitalize">{{ data.item.<%= name %> }}</span>
          </div>
        </template>
        <%=/ifEquals %>
        <%=#ifEquals type 'status' %>
        <%=!-- Column: Status --%>
        <template #cell(<%= name %>)="data">
          <b-badge
            pill
            :variant="`light-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
            class="text-capitalize"
          >
            {{ data.item.<%= name %> }}
          </b-badge>
        </template>
        <%=/ifEquals %>
<!-- end Column: <%= name %> -->
      <%=/each %>
 <!-- Column: Actions -->
        <template #cell(actions)="data">
          <b-dropdown
            variant="link"
            no-caret
            :right="$store.state.appConfig.isRTL"
          >

            <template #button-content>
              <feather-icon
                icon="MoreVerticalIcon"
                size="16"
                class="align-middle text-body"
              />
            </template>
            <b-dropdown-item :to="{ name: '<%= pluralize name %>-view', params: { id: data.item.id } }">
              <feather-icon icon="FileTextIcon" />
              <span class="align-middle ml-50">تفاصيل</span>
            </b-dropdown-item>

            <b-dropdown-item :to="{ name: '<%= pluralize name %>-edit', params: { id: data.item.id } }">
              <feather-icon icon="EditIcon" />
              <span class="align-middle ml-50">تعديل</span>
            </b-dropdown-item>
            <b-dropdown-item @click="download(data.item)">
              <feather-icon icon="DownloadIcon" />
              <span class="align-middle ml-50">تنزيل</span>
            </b-dropdown-item>

            <b-dropdown-item @click="confirmDelete(data.item)">
              <feather-icon icon="TrashIcon" />
              <span class="align-middle ml-50">حذف</span>
            </b-dropdown-item>
          </b-dropdown>
        </template>
    </b-table>
    <div class="mx-2 mb-2">
      <b-row>

        <b-col
          cols="12"
          sm="6"
          class="d-flex align-items-center justify-content-center justify-content-sm-start"
        >
            <span class="text-muted">عرض من {{ dataMeta.from }} إلى {{ dataMeta.to }} من {{ dataMeta.of }} مدخلات</span>
        </b-col>
        <!-- Pagination -->
        <b-col
          cols="12"
          sm="6"
          class="d-flex align-items-center justify-content-center justify-content-sm-end"
        >

          <b-pagination
            v-model="currentPage"
            :total-rows="totalInvoices"
            :per-page="perPage"
            first-number
            last-number
            class="mb-0 mt-1 mt-sm-0"
            prev-class="prev-item"
            next-class="next-item"
          >
            <template #prev-text>
              <feather-icon
                icon="ChevronLeftIcon"
                size="18"
              />
            </template>
            <template #next-text>
              <feather-icon
                icon="ChevronRightIcon"
                size="18"
              />
            </template>
          </b-pagination>

        </b-col>

      </b-row>
    </div>
  </b-card>

</template>

<script>
import {
  BCard, BRow, BCol, BFormInput, BButton, BTable, BMedia, BAvatar, BLink,
  BBadge, BDropdown, BDropdownItem, BPagination, BTooltip,
} from 'bootstrap-vue'
import { avatarText } from '@core/utils/filter'
import vSelect from 'vue-select'
import { onUnmounted } from '@vue/composition-api'
import store from '@/store'
import useInvoicesList from './useInvoiceList'

import invoiceStore from '../invoiceStore'
import ToastificationContent from '@core/components/toastification/ToastificationContent.vue';

export default {
  components: {
    BCard,
    BRow,
    BCol,
    BFormInput,
    BButton,
    BTable,
    BMedia,
    BAvatar,
    BLink,
    BBadge,
    BDropdown,
    BDropdownItem,
    BPagination,
    BTooltip,

    vSelect,
  },
  methods: {
    download(invoice) {
      this.$toast.info('جاري التنزيل...', {
        autoHide: false,
        appendToast: ToastificationContent,
      });
      store.dispatch('app-invoice/downloadInvoice', { id: invoice.id })
      .then(response => {
        this.$toast.success('تم التنزيل بنجاح');
        this.downloadFile(response.data, invoice.invoice_number);
        })
      .catch(error => {
        console.log(error);
        this.$toast.error('حدث خطأ اثناء التنزيل');
      })

    },
    downloadFile(data, filename, type = 'application/pdf') {
    let a = document.createElement('a');
    document.body.appendChild(a);
    a.style = 'display: none';
    const blob = new Blob([data], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    a.href = url;
    a.download = filename+ '.pdf';
    a.click();
    window.URL.revokeObjectURL(url);
  },
    deleteInvoice(invoice) {
      store.dispatch('app-invoice/deleteInvoice', { id: invoice.id })
      .then(response => { 
        this.$emit('refetch-data')
        this.$toast({
            component: ToastificationContent,
            props: {
              title: 'تم حذف الفاتورة بنجاح',
              icon: 'EditIcon',
              variant: 'success',
            },
          })        
          })
      .catch(error => {
        if (error.response.status === 404) {
          invoiceData.value = undefined
        }
      })
    },
    confirmDelete(invoice) {
      this.$bvModal
        .msgBoxConfirm(`يرجى تأكيد أنك تريد حذف الفاتورة  ${invoice.subject}.`, {
          title: 'يرجى التأكيد',
          size: 'sm',
          okVariant: 'danger',
          okTitle: 'نعم',
          cancelTitle: 'لا',
          cancelVariant: 'outline-warning',
          hideHeaderClose: false,
          centered: true,
        })
        .then(value => {
          if(value){
            this.deleteInvoice(invoice)
          }
        })
    }
  },
 
  setup() {
    const INVOICE_APP_STORE_MODULE_NAME = 'app-invoice'

    // Register module
    if (!store.hasModule(INVOICE_APP_STORE_MODULE_NAME)) store.registerModule(INVOICE_APP_STORE_MODULE_NAME, invoiceStore)

    // UnRegister on leave
    onUnmounted(() => {
      if (store.hasModule(INVOICE_APP_STORE_MODULE_NAME)) store.unregisterModule(INVOICE_APP_STORE_MODULE_NAME)
    })

    const statusOptions = [
      'Downloaded',
      'Draft',
      'Paid',
      'Partial Payment',
      'Past Due',
    ]

    const {
      fetchInvoices,
      tableColumns,
      perPage,
      currentPage,
      totalInvoices,
      dataMeta,
      perPageOptions,
      searchQuery,
      sortBy,
      isSortDirDesc,
      refInvoiceListTable,

      statusFilter,

      refetchData,

      resolveInvoiceStatusVariantAndIcon,
      resolveClientAvatarVariant,
    } = useInvoicesList()

    return {
      fetchInvoices,
      tableColumns,
      perPage,
      currentPage,
      totalInvoices,
      dataMeta,
      perPageOptions,
      searchQuery,
      sortBy,
      isSortDirDesc,
      refInvoiceListTable,

      statusFilter,

      refetchData,

      statusOptions,

      avatarText,
      resolveInvoiceStatusVariantAndIcon,
      resolveClientAvatarVariant,
    }
  },
}
</script>

<style lang="scss" scoped>
.per-page-selector {
  width: 90px;
}

.invoice-filter-select {
  min-width: 190px;

  ::v-deep .vs__selected-options {
    flex-wrap: nowrap;
  }

  ::v-deep .vs__selected {
    width: 100px;
  }
}
</style>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';
</style>
