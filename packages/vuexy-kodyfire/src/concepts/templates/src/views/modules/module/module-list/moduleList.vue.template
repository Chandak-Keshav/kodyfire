<template>

  <div>

    <<%= name %>-list-add-new
      :is-add-new-<%= name %>-sidebar-active.sync="isAddNew<%= classify name %>SidebarActive"
      <%=#each data.options %>
      :<%=name%>-options="<%=name%>Options"
      <%=/each %>
      @refetch-data="refetchData"
    />

    <!-- Table Container Card -->
    <b-card
      no-body
      class="mb-0"
    >

      <div class="m-2">

        <!-- Table Top -->
        <b-row>

          <!-- Per Page -->
          <b-col
            cols="12"
            md="6"
            class="d-flex align-items-center justify-content-start mb-1 mb-md-0"
          >
            <label>عرض</label>
            <v-select
              v-model="perPage"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="perPageOptions"
              :clearable="false"
              class="per-page-selector d-inline-block mx-50"
            />
            <label>مدخلات</label>
          </b-col>

          <!-- Search -->
          <b-col
            cols="12"
            md="6"
          >
            <div class="d-flex align-items-center justify-content-end">
              <b-form-input
                v-model="searchQuery"
                class="d-inline-block mr-1"
                placeholder="بحث..."
              />
              <b-button
                variant="primary"
                @click="isAddNew<%= classify name %>SidebarActive = true"
              >
                <span class="text-nowrap">إضافة {{$t('<%= lowercase name %>')}}</span>
              </b-button>
            </div>
          </b-col>
        </b-row>

      </div>

      <b-table
        ref="ref<%= classify name %>ListTable"
        class="position-relative"
        :items="fetch<%= classify ( pluralize name) %>"
        responsive
        :fields="tableColumns"
        primary-key="id"
        :sort-by.sync="sortBy"
        show-empty
        empty-text="لم يتم العثور على سجلات مطابقة"
        :sort-desc.sync="isSortDirDesc"
      >
      <%=#each data.columns %>
        <%=#ifEquals type 'link' %>
        <!-- Column: type link -->
      <template #cell(<%= name %>)="data">
        <b-link
          :to="{<%= link %>}"
          class="font-weight-bold"
        >
          #{{ data.value }}
        </b-link>
      </template>
        <%=/ifEquals %>
        <%=#ifEquals type 'text' %>
<!-- Column: type text -->
      <template #cell(<%= name %>)="data">
        <span class="text-nowrap">
          {{ data.value }}
        </span>
      </template>
      <%=/ifEquals %>
        <%=#ifEquals type 'user' %>
        <template #cell(<%= name %>)="data">
          <b-media vertical-align="center">
            <template #aside>
              <b-avatar
                size="32"
                :src="data.item.avatar"
                :text="avatarText(data.item.<%= name %>)"
                :variant="`light-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
                :to="{ name: '<%= name %>-view', params: { id: data.item.id } }"
              />
            </template>
            <b-link
              :to="{ name: '<%= name %>-view', params: { id: data.item.id } }"
              class="font-weight-bold d-block text-nowrap"
            >
              {{ data.item.name }}
            </b-link>
            <small class="text-muted">@{{ data.item.email }}</small>
          </b-media>
        </template>
        <%=/ifEquals %>
        <!-- Column: type icon -->

        <%=#ifEquals type 'icon' %>
        <template #cell(<%= name %>)="data">
          <div class="text-nowrap">
            <feather-icon
              :icon="resolve<%= classify ../name %><%= classify name %>Icon(data.item.<%= name %>)"
              size="18"
              class="mr-50"
              :class="`text-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
            />
            <span class="align-text-top text-capitalize">{{ data.item.<%= name %> }}</span>
          </div>
        </template>
        <%=/ifEquals %>
        <!-- Column: Status -->
        <%=#ifEquals type 'status' %>
        <template #cell(<%= name %>)="data">
          <b-badge
            pill
            :variant="`light-${resolve<%= classify ../name %><%= classify name %>Variant(data.item.<%= name %>)}`"
            class="text-capitalize"
          >
            {{ data.item.<%= name %> }}
          </b-badge>
        </template>
        <%=/ifEquals %>

      <%=/each %>
        <!-- Column: Actions -->
        <template #cell(actions)="data">
          <b-dropdown
            variant="link"
            no-caret
            :right="$store.state.appConfig.isRTL"
          >

            <template #button-content>
              <feather-icon
                icon="MoreVerticalIcon"
                size="16"
                class="align-middle text-body"
              />
            </template>

            <b-dropdown-item :to="{ name: '-edit', params: { id: data.item.id } }">
              <feather-icon icon="EditIcon" />
              <span class="align-middle ml-50">تعديل</span>
            </b-dropdown-item>

            <b-dropdown-item  @click="confirmDelete(data.item)">
              <feather-icon icon="TrashIcon" />
              <span class="align-middle ml-50">حذف</span>
            </b-dropdown-item>
          </b-dropdown>
        </template>
      </b-table>
      <div class="mx-2 mb-2">
        <b-row>

          <b-col
            cols="12"
            sm="6"
            class="d-flex align-items-center justify-content-center justify-content-sm-start"
          >
            <span class="text-muted">عرض من {{ dataMeta.from }} إلى {{ dataMeta.to }} من {{ dataMeta.of }} مدخلات</span>
          </b-col>
          <!-- Pagination -->
          <b-col
            cols="12"
            sm="6"
            class="d-flex align-items-center justify-content-center justify-content-sm-end"
          >

            <b-pagination
              v-model="currentPage"
              :total-rows="total<%= classify name %>"
              :per-page="perPage"
              first-number
              last-number
              class="mb-0 mt-1 mt-sm-0"
              prev-class="prev-item"
              next-class="next-item"
            >
              <template #prev-text>
                <feather-icon
                  icon="ChevronLeftIcon"
                  size="18"
                />
              </template>
              <template #next-text>
                <feather-icon
                  icon="ChevronRightIcon"
                  size="18"
                />
              </template>
            </b-pagination>

          </b-col>

        </b-row>
      </div>
    </b-card>
  </div>
</template>

<script>
import {
  BCard, BRow, BCol, BFormInput, BButton, BTable, BMedia, BAvatar, BLink,
  BBadge, BDropdown, BDropdownItem, BPagination,
} from 'bootstrap-vue'
import vSelect from 'vue-select'
import store from '@/store'
import { ref, onUnmounted } from '@vue/composition-api'
import { avatarText } from '@core/utils/filter'
import <%= classify name %>ListFilters from './<%= classify name %>ListFilters.vue'
import use<%= classify name %>List from './use<%= classify name %>List'
import <%= name %>Store from '../<%= name %>Store'
import <%= classify name %>ListAddNew from './<%= classify name %>ListAddNew.vue'
import ToastificationContent from '@core/components/toastification/ToastificationContent.vue';

export default {
  components: {
    <%= classify name %>ListFilters,
    <%= classify name %>ListAddNew,
    BCard,
    BRow,
    BCol,
    BFormInput,
    BButton,
    BTable,
    BMedia,
    BAvatar,
    BLink,
    BBadge,
    BDropdown,
    BDropdownItem,
    BPagination,

    vSelect,
  },
  methods: {
       delete<%= classify name %>(<%= name %>) {
      store.dispatch('<%= name %>/delete<%= classify name %>', { id: <%= name %>.id })
      .then(response => { 
        this.$emit('refetch-data')
        this.refetchData();
        this.$toast({
            component: ToastificationContent,
            props: {
              title: 'تم الحذف بنجاح',
              icon: 'EditIcon',
              variant: 'success',
            },
          })        
          })
      .catch(error => {
        if (error.response.status === 404) {
          <%= name %>Data.value = undefined
        }
      })
    },
    confirmDelete(<%= name %>) {
      this.$bvModal
        .msgBoxConfirm(`يرجى تأكيد أنك تريد حذف العنصر  ${ <%= name %>.id}.`, {
          title: 'يرجى التأكيد',
          size: 'sm',
          okVariant: 'danger',
          okTitle: 'نعم',
          cancelTitle: 'لا',
          cancelVariant: 'outline-warning',
          hideHeaderClose: false,
          centered: true,
        })
        .then(value => {
          if(value){
            this.delete<%= classify name %>(<%= name %>)
          }
        })
    }
 
  },
  setup() {
    const <%= uppercase name %>_STORE_MODULE_NAME = '<%= name %>'

    // Register <%= name %>
    if (!store.hasModule(<%= uppercase name %>_STORE_MODULE_NAME)) store.registerModule(<%= uppercase name %>_STORE_MODULE_NAME, <%= name %>Store)

    // UnRegister on leave
    onUnmounted(() => {
      if (store.hasModule(<%= uppercase name %>_STORE_MODULE_NAME)) store.unregisterModule(<%= uppercase name %>_STORE_MODULE_NAME)
    })

    const isAddNew<%= classify name %>SidebarActive = ref(false)
    <%=#each data.options %>
    const <%= name %>Options = [
    <%=#each items %>
      {
        label: '<%= label %>',
        value: '<%= value %>',
      },
      <%=/each %>
      ]
      <%=/each %>

    const {
      fetch<%= classify (pluralize name) %>,
      tableColumns,
      perPage,
      currentPage,
      total<%= classify name %>,
      dataMeta,
      perPageOptions,
      searchQuery,
      sortBy,
      isSortDirDesc,
      ref<%= classify name %>ListTable,
      refetchData,

      // UI
      <%=#each data.options %>
      <%= name %>Filter,
      <%=#if hasVariant %>
      resolve<%= classify name %>Variant,
      <%=/if %>
      <%=#if hasIcon %>
      resolve<%= classify name %>Icon,
      <%=/if %>
      <%=/each %>
    } = use<%= classify name %>List()

    return {

      // Sidebar
      isAddNew<%= classify name %>SidebarActive,

      fetch<%= classify (pluralize name)  %>,
      tableColumns,
      perPage,
      currentPage,
      total<%= classify name %>,
      dataMeta,
      perPageOptions,
      searchQuery,
      sortBy,
      isSortDirDesc,
      ref<%= classify name %>ListTable,
      refetchData,

      // Filter
      avatarText,

      // UI
      <%=#each data.options %>
      <%= name %>Options,
      <%= name %>Filter,
      <%=#if hasVariant %>
      resolve<%= classify name %>Variant,
      <%=/if %>
      <%=#if hasIcon %>
      resolve<%= classify name %>Icon,
      <%=/if %>
      <%=/each%>
    }
  },
}
</script>

<style lang="scss" scoped>
.per-page-selector {
  width: 90px;
}
</style>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';
</style>
