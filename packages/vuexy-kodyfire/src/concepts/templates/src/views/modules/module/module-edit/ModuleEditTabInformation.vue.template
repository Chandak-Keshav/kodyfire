<template>
  <div>
    <!-- Form: <%= classify name %> Info Form -->
    <b-form class="mt-1">
      <b-row>
        <%=#each data.form_fields %>
        <b-col
          cols="12"
          md="6"
          lg="4"
        >
        <!-- Field: <%= name %> -->
         <validation-provider
           #default="validationContext"
                      vid="<%= name %>"
                      name="<%= name %>"
                      rules="<%= rules %>"
                    >
        <b-form-group
              label="<%= label %>"
              label-for="<%= name %>"
              :state="getValidationState(validationContext)"
            >
        <%=#ifEquals type 'dateTime' %>
          
                    <flat-pickr
                      v-model="<%= ../name %>Data.<%= name %>"
                      :config="config"
                      class="form-control <%= ../name %>-edit-input"
                    />
          <%=/ifEquals %>
          <%=#ifEquals type 'text' %>
            <b-form-input
              id="<%= dasherize name %>"
              v-model="<%= ../name %>Data.<%= name %>"
            />
          <%=/ifEquals %>
          <%=#ifEquals type 'textarea' %>
                          <b-form-textarea
                          id="<%= name %>"
                            v-model="<%= ../name %>Data.<%= name %>"
                            class="mb-2 mb-lg-0"
                          />
          <%=/ifEquals %>
          <%=#ifEquals type 'select' %>
              <v-select
                v-model="<%= ../name %>Data.<%= name %>"
                @input="<%= name %>Changed"
                :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
                :options="<%= pluralize name %>"
                :reduce="val => val.value"
                :clearable="false"
                input-id="<%= name %>"
              />
          <%=/ifEquals %>
          <%=#ifEquals type 'radio' %>
            <b-form-radio-group
              id="<%= dasherize name %>"
              v-model="<%= ../name %>Data.<%= name %>"
              :options="<%= option%>Options"
            />
          <%=/ifEquals %>
           <%=#ifEquals type 'checkbox' %>
            <b-form-checkbox-group
              id="<%= dasherize name %>"
              v-model="<%= ../name %>Data.<%= name %>"
              :options="<%= option%>Options"
            />
            <%=/ifEquals %>
            <b-form-invalid-feedback
                :state="getValidationState(validationContext)"
              >
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
          </b-form-group>
          </validation-provider>
        </b-col>
         <%=/each%>
      </b-row>
      <b-row class="mt-2">
        <b-col>
          <b-button
            variant="primary"
            class="mb-1 mb-sm-0 mr-0 mr-sm-1"
            :block="$store.getters['app/currentBreakPoint'] === 'xs'"
          >
            حفظ التغييرات
          </b-button>
          <b-button
            variant="outline-secondary"
            :block="$store.getters['app/currentBreakPoint'] === 'xs'"
          >
            إعادة ضبط
          </b-button>
        </b-col>
      </b-row>
    </b-form>
  </div>
</template>

<script>
import {
  BRow, BCol, BForm, BFormInvalidFeedback, BFormTextarea, BFormGroup, BFormInput, BFormRadioGroup, BFormCheckboxGroup, BButton,
} from 'bootstrap-vue'
import flatPickr from 'vue-flatpickr-component'
import { ref, onUnmounted } from '@vue/composition-api'
import vSelect from 'vue-select'
import store from '@/store'
import { ValidationProvider, ValidationObserver } from 'vee-validate';
import { required, alphaNum, validEmail } from '@validations';
import formValidation from '@core/comp-functions/forms/form-validation';
import {Arabic} from 'flatpickr/dist/l10n/ar.js';
import <%= name %>Store from '../<%= name %>Store'

export default {
  data() {
    return {
      required,
      alphaNum,
      validEmail,
      config: {
        locale: Arabic,
      }
    }
  },
  methods: {
    <%=#each data.remote_options %>
    <%= name %>Changed(<%= name %>) {
      this.<%= ../name%>Data.<%= name %>_id = <%= name %>;
    },<%=/each%>
  },
  components: {
    BRow, BCol, BForm, BFormInvalidFeedback, BFormTextarea, BFormGroup, flatPickr, BFormInput, vSelect, BFormRadioGroup, BFormCheckboxGroup, BButton,
    // Form Validation
    ValidationProvider,
    ValidationObserver,
  },
  props: {
    <%= name %>Data: {
      type: Object,
      required: true,
    }
  },
  
  setup(props) {
    const <%= uppercase name %>_STORE_MODULE_NAME = '<%= name %>'

    // Register <%= name %>
    if (!store.hasModule(<%= uppercase name %>_STORE_MODULE_NAME)) store.registerModule(<%= uppercase name %>_STORE_MODULE_NAME, <%= name %>Store)

    // UnRegister on leave
    onUnmounted(() => {
      if (store.hasModule(<%= uppercase name %>_STORE_MODULE_NAME)) store.unregisterModule(<%= uppercase name %>_STORE_MODULE_NAME)
    })
    <%=#each options %>
    const <%= name %>Options = [
     <%=#each data %>
        <%=#unless hidden %>
        { label: '<%= label %>', value: '<%= value %>' },
        <%=/unless %>
    <%=/each %>
    <%=/each%>
    <%=#each data.remote_options %>
    let <%= pluralize name %> = ref([])
    const res =  store.dispatch('<%= ../name %>/fetch<%= pluralize (classify name) %>')
    .then(response => {
      const res = response.data 
      <%= pluralize name %>.value = res.map(c => ({
        label: c.name, value: c.id, ...c,
        }))
      })
      <%=/each %>
    const old<%= classify name %>Data = JSON.parse(JSON.stringify(props.<%= name %>Data));
        const reset<%= classify name %>Data = () => {
          <%= name %>Data.value = JSON.parse(JSON.stringify(old<%= classify name %>Data));
        };

    const { refFormObserver, getValidationState, resetForm } =
      formValidation(reset<%= classify name %>Data);

    return {
      refFormObserver,
      getValidationState,
      resetForm,
      <%=#each data.remote_options %>
      <%= pluralize name %>,
      <%=/each %>
      <%=#each options %>
      <%= name %>Options,
      <%=/each%>
    }
  },
}
</script>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';
@import '@core/scss/vue/libs/vue-flatpicker.scss';
</style>
