<template>
  <b-sidebar
    id="add-new-user-sidebar"
    :visible="isAddNewUserSidebarActive"
    bg-variant="white"
    sidebar-class="sidebar-lg"
    shadow
    backdrop
    no-header
    right
    @hidden="resetForm"
    @change="val => $emit('update:is-add-new-user-sidebar-active', val)"
  >
    <template #default="{ hide }">
      <!-- Header -->
      <div
        class="
          d-flex
          justify-content-between
          align-items-center
          content-sidebar-header
          px-2
          py-1
        "
      >
        <h5 class="mb-0">إضافة مستخدم جديد</h5>

        <feather-icon
          class="ml-1 cursor-pointer"
          icon="XIcon"
          size="16"
          @click="hide"
        />
      </div>

      <!-- BODY -->
      <validation-observer #default="{ handleSubmit }" ref="refFormObserver">
        <!-- Form -->
        <b-form
          class="p-2"
          @submit.prevent="handleSubmit(onSubmit)"
          @reset.prevent="resetForm"
        >
          <!-- Full Name -->
          <validation-provider
            #default="validationContext"
            name="name"
            rules="required"
          >
            <b-form-group label="الاسم الكامل" label-for="name">
              <b-form-input
                id="full-name"
                v-model="userData.name"
                autofocus
                :state="getValidationState(validationContext)"
                trim
                placeholder="محمد إبراهيم عبدالله"
              />

              <b-form-invalid-feedback>
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>

          <!-- Email -->
          <validation-provider
            #default="validationContext"
            name="email"
            rules="required|email"
          >
            <b-form-group label="البريد الالكتروني" label-for="email">
              <b-form-input
                id="email"
                v-model="userData.email"
                :state="getValidationState(validationContext)"
                trim
              />

              <b-form-invalid-feedback>
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>

          <!-- phone -->
          <validation-provider
            #default="validationContext"
            name="mobile"
            rules="required"
          >
            <b-form-group label="الهاتف الجوّال" label-for="mobile">
              <b-form-input
                id="mobile"
                v-model="userData.mobile"
                :state="getValidationState(validationContext)"
                trim
              />

              <b-form-invalid-feedback>
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>

          <!-- user_role -->
          <validation-provider
            #default="validationContext"
            name="user_role"
            rules="required"
          >
            <b-form-group
              label="دورالمستخدم"
              label-for="user_role"
              :state="getValidationState(validationContext)"
            >
              <v-select
                v-model="userData.role"
                :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
                :options="roleOptions"
                :reduce="val => val.value"
                :clearable="false"
                input-id="user-role"
              />
              <b-form-invalid-feedback
                :state="getValidationState(validationContext)"
              >
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>

          <!-- extra fields -->
          <%=#each data.form_fields %>
          <%=#ifEquals type 'select' %>
          <validation-provider
            #default="validationContext"
            name="user_role"
            rules="required"
          >
            <b-form-group
              label="دورالمستخدم"
              label-for="user_role"
              :state="getValidationState(validationContext)"
            >
              <v-select
                v-model="userData.role"
                :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
                :options="roleOptions"
                :reduce="val => val.value"
                :clearable="false"
                input-id="user-role"
              />
              <b-form-invalid-feedback
                :state="getValidationState(validationContext)"
              >
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>
          <%=/ifEquals %>
          <%=#ifEquals type 'text' %>
          <validation-provider
            <%=#if data.required %>
            v-if="<%=data.required%>"
            <%=/if%>
            #default="validationContext"
            name="<%= name %>"
            rules="<%= rules %>"
          >
            <b-form-group label="<%= label %>" label-for="<%= name %>">
              <b-form-input
                id="<%= name %>"
                v-model="userData.<%= name %>"
                :state="getValidationState(validationContext)"
                trim
              />

              <b-form-invalid-feedback>
                {{ validationContext.errors[0] }}
              </b-form-invalid-feedback>
            </b-form-group>
          </validation-provider>
          <%=/ifEquals %>
          <%=/each %>
          <!-- Form Actions -->
          <div class="d-flex mt-2">
            <b-button
              v-ripple.400="'rgba(255, 255, 255, 0.15)'"
              variant="primary"
              class="mr-2"
              type="submit"
            >
              إنشاء المستخدم
            </b-button>
            <b-button
              v-ripple.400="'rgba(186, 191, 199, 0.15)'"
              type="button"
              variant="outline-secondary"
              @click="hide"
            >
              إلغاء
            </b-button>
          </div>
        </b-form>
      </validation-observer>
    </template>
  </b-sidebar>
</template>

<script>
import {
  BSidebar,
  BForm,
  BFormGroup,
  BFormInput,
  BFormInvalidFeedback,
  BButton,
} from 'bootstrap-vue';
import { ValidationProvider, ValidationObserver } from 'vee-validate';
import { ref } from '@vue/composition-api';
import { required, alphaNum, email } from '@validations';
import formValidation from '@core/comp-functions/forms/form-validation';
import Ripple from 'vue-ripple-directive';
import vSelect from 'vue-select';
import store from '@/store';
import ToastificationContent from '@core/components/toastification/ToastificationContent.vue';

export default {
  components: {
    BSidebar,
    BForm,
    BFormGroup,
    BFormInput,
    BFormInvalidFeedback,
    BButton,
    vSelect,

    // Form Validation
    ValidationProvider,
    ValidationObserver,
  },
  directives: {
    Ripple,
  },
  model: {
    prop: 'isAddNewUserSidebarActive',
    event: 'update:is-add-new-user-sidebar-active',
  },
  props: {
    isAddNewUserSidebarActive: {
      type: Boolean,
      required: true,
    },
    roleOptions: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      required,
      alphaNum,
      email,
    };
  },
  methods: {
     async onSubmit() {
      this.$refs.refFormObserver.validate().then(async (success) => {
        if (success) {
          let data = Object.assign({}, this.userData);
          data.password = 'password';
          const currentUser = JSON.parse(localStorage.getItem('userData'));
          store
            .dispatch('app-user/addUser', data)
            .then((response) => {
              this.$emit('refetch-data');
              this.$emit('update:is-add-new-user-sidebar-active', false);
              this.$toast({
                component: ToastificationContent,
                props: {
                  title: 'تم إنشاء المستخدم بنجاح',
                  icon: 'EditIcon',
                  variant: 'success',
                },
              });
            })
            .catch(error => {
              console.log(error);
              this.$refs.refFormObserver.setErrors(error.response.data.errors);
              this.$toast({
                component: ToastificationContent,
                props: {
                  title: error.response.data.message,
                  text: error.response.data.message,
                  icon: 'AlertCircleIcon',
                  variant: 'danger',
                },
              });
              return;
            });
        }
      });
    },
  },
  setup(props, { emit }) {
    const blankUserData = {
      name: '',
      email: '',
      role: null,
      mobile: '',
      <%=#each data.form_fields %>
      <%= name %>: '',
      <%=/each %>
    };

    const userData = ref(JSON.parse(JSON.stringify(blankUserData)));
    const resetuserData = () => {
      userData.value = JSON.parse(JSON.stringify(blankUserData));
    };

    const { refFormObserver, getValidationState, resetForm } =
      formValidation(resetuserData);
    return {
      userData,
      refFormObserver,
      getValidationState,
      resetForm,
    };
  },
};
</script>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';

#add-new-user-sidebar {
  .vs__dropdown-menu {
    max-height: 200px !important;
  }
}
</style>
