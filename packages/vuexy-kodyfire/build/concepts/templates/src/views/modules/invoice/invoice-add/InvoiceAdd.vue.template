<template>
  <section class="invoice-add-wrapper">
    <validation-observer
        #default="{ handleSubmit }"
        ref="refFormObserver"
      >
        <b-form
         @submit.prevent="handleSubmit(onSubmit)"
          @reset.prevent="resetForm"
         >
    <b-row class="invoice-add">
      <!-- Col: Left (Invoice Container) -->
      <b-col
        cols="12"
        xl="9"
        md="8"
      >
          <b-card
            no-body
            class="invoice-preview-card"
          >
            <!-- Header -->
            <b-card-body class="invoice-padding pb-0">

              <div class="d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0">

                <!-- Header: Left Content -->
                <div>
                  <div class="logo-wrapper">
                    <%=!-- <logo /> --%>
                    <h3 class="text-primary invoice-logo">
                      {{ company.name}}
                    </h3>
                  </div>
                  <b-card-text class="mb-25">
                   {{ company.address }}
                  </b-card-text>
                  <b-card-text class="mb-0">
                    {{ company.phone }}
                  </b-card-text>
                </div>

                <!-- Header: Right Content -->
                <div class="invoice-number-date mt-md-0 mt-2">
                  <div class="d-flex align-items-center justify-content-md-end mb-1">
                    <h4 class="invoice-title">
                      {{$t('invoice')}}
                    </h4>
                    <b-input-group class="input-group-merge invoice-edit-input-group disabled">
                      <b-input-group-prepend is-text>
                        <feather-icon icon="HashIcon" />
                      </b-input-group-prepend>
                      <b-form-input
                        id="invoice-data-invoice-number"
                        v-model="invoiceData.invoice_number"
                        disabled
                      />
                    </b-input-group>
                  </div>
                  <div class="d-flex align-items-center mb-1">
                    <span class="title">
                      تاريخ:
                    </span>
                    <validation-provider
                      vid="supply_date"
                      name="supply_date"
                      rules="required"
                      v-slot="{ errors }"
                    >
                    <flat-pickr
                      v-model="invoiceData.supply_date"
                      class="form-control invoice-edit-input"
                    />
                    <small class="text-danger">{{ errors[0] }}</small>
                    </validation-provider>
                  </div>
                  <div class="d-flex align-items-center">
                    <span class="title">
                      تاريخ التسليم:
                    </span>
                    <validation-provider
                      vid="due_date"
                      name="due_date"
                      rules="required"
                      v-slot="{ errors }"
                    >
                    <flat-pickr
                      v-model="invoiceData.due_date"
                      class="form-control invoice-edit-input"
                    />
                    <small class="text-danger">{{ errors[0] }}</small>
                    </validation-provider>
                  </div>
                </div>
              </div>
            </b-card-body>

            <!-- Spacer -->
            <hr class="invoice-spacing">

            <!-- Invoice Client & Payment Details -->
            <b-card-body
              class="invoice-padding pt-0"
            >
              <b-row class="invoice-spacing">

                <!-- Col: Invoice To -->
                <b-col
                  cols="12"
                  xl="6"
                  class="mb-lg-1"
                >
                  <h6 class="mb-2">
                    فاتورة إلى:
                  </h6>
                  <!-- Select Client -->
                  <v-select
                    v-model="invoiceData.customer"
                    @input="customerChanged" 
                    :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
                    :options="customers"
                    input-id="invoice-data-client"
                    :clearable="false"
                  >
                    <template #list-header>
                      <li
                        v-b-toggle.sidebar-invoice-add-new-customer
                        class="add-new-client-header d-flex align-items-center my-50"
                      >
                        <feather-icon
                          icon="PlusIcon"
                          size="16"
                        />
                        <span class="align-middle ml-25">أضف عميلًا جديدًا</span>
                      </li>
                    </template>
                  </v-select>

                  <!-- Selected Client -->
                  <div
                    v-if="invoiceData.customer"
                    class="mt-1"
                  >
                    <h6 class="mb-25">
                      {{ invoiceData.customer.display_name }}
                    </h6>
                    <b-card-text class="mb-25">
                      {{ invoiceData.customer.name }}
                    </b-card-text>
                    <b-card-text class="mb-25">
                      {{ invoiceData.customer.address }}, {{ invoiceData.customer.country }}
                    </b-card-text>
                    <b-card-text class="mb-25">
                      {{ invoiceData.customer.phone }}
                    </b-card-text>
                    <b-card-text class="mb-0">
                      {{ invoiceData.customer.email }}
                    </b-card-text>
                  </div>
                </b-col>

                <!-- Col: Payment Details -->
                <b-col
                  xl="6"
                  cols="12"
                  class="mt-xl-0 mt-2 justify-content-end d-xl-flex d-block"
                >
                  <div>
                    <h6 class="mb-2">
                      بيانات الدفع:
                    </h6>
                    <table>
                      <tbody>
                        <tr>
                          <td class="pr-1">
                            الاجمالي المستحق:
                          </td>
                          <td><span class="font-weight-bold">{{getInvoiceTotal()}} ريال</span></td>
                        </tr>
                        <%=!-- <tr>
                          <td class="pr-1">
                            Bank name:
                          </td>
                          <td>American Bank</td>
                        </tr>
                        <tr>
                          <td class="pr-1">
                            Country:
                          </td>
                          <td>United States</td>
                        </tr>
                        <tr>
                          <td class="pr-1">
                            IBAN:
                          </td>
                          <td>ETD95476213874685</td>
                        </tr>
                        <tr>
                          <td class="pr-1">
                            SWIFT code:
                          </td>
                          <td>BR91905</td>
                        </tr> --%>
                      </tbody>
                    </table>
                  </div>
                </b-col>
              </b-row>
            </b-card-body>

            <!-- Items Section -->
            <b-card-body class="invoice-padding form-item-section">
              <div
                ref="form"
                class="repeater-form"
                :style="{height: trHeight}"
              >
                <b-row
                  v-for="(item, index) in invoiceData.items"
                  :key="index"
                  ref="row"
                  class="pb-2"
                >

                  <!-- Item Form -->
                  <!-- ? This will be in loop => So consider below markup for single item -->
                  <b-col cols="12">

                    <!-- ? Flex to keep separate width for XIcon and SettingsIcon -->
                    <div class="d-none d-lg-flex">
                      <b-row class="flex-grow-1 px-1">
                        <!-- Single Item Form Headers -->
                        <b-col
                          cols="12"
                          lg="5"
                        >
                          المنتج
                        </b-col>
                        <b-col
                          cols="12"
                          lg="3"
                        >
                          التكلفة
                        </b-col>
                        <b-col
                          cols="12"
                          lg="2"
                        >
                          الكمية
                        </b-col>
                        <b-col
                          cols="12"
                          lg="2"
                        >
                          السعر
                        </b-col>
                      </b-row>
                      <div class="form-item-action-col" />
                    </div>

                    <!-- Form Input Fields OR content inside bordered area  -->
                    <!-- ? Flex to keep separate width for XIcon and SettingsIcon -->
                    <div class="d-flex border rounded">
                      <b-row class="flex-grow-1 p-2">
                        <!-- Single Item Form Headers -->
                        <b-col
                          cols="12"
                          lg="5"
                        >
                        <b-form-group
                        label="المنتج/ الخدمة"
                    :label-for="`item-${index}-name`"
                        >
                          <validation-provider
                      vid="item.name"
                      name="item.name"
                      rules="required"
                      v-slot="{ errors }"
                    >
                          <v-select
                            v-model="item.name"
                            :id="`item-${index}-name`"
                            :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
                            :options="items"
                            :clearable="false"
                            :state="errors.length > 0 ? false : null"
                            placeholder="إختر المنتج/ الخدمة"
                            @input="val => updateItemForm(index, val)"
                          />
                          <small class="text-danger">{{ errors[0] }}</small>
                    </validation-provider>
                    </b-form-group>
                        </b-col>
                        <b-col
                          cols="12"
                          lg="3"
                        >
                        <b-form-group
                        label="الكلفة"
                    :label-for="`item-${index}-selling_price`"
                        >
                          <validation-provider
                      vid="item.selling_price"
                      name="item.selling_price"
                      rules="required"
                      v-slot="{ errors }"
                    >
                          <b-form-input
                          :id="`item-${index}-selling_price`"
                            v-model="item.selling_price"
                            :state="errors.length > 0 ? false : null"
                            type="number"
                            step="any"
                          />
                           <small class="text-danger">{{ errors[0] }}</small>
                          </validation-provider>
                          </b-form-group>
                        </b-col>
                        <b-col
                          cols="12"
                          lg="2"
                        >
                        <b-form-group
                        label="الكمّية"
                    :label-for="`item-${index}-selling_price`"
                        >
                          <validation-provider
                      vid="item.qty"
                      name="item.qty"
                      rules="required"
                      v-slot="{ errors }"
                    >
                          <b-form-input
                          :id="`item-${index}-qty`"
                          :state="errors.length > 0 ? false : null"
                            v-model="item.qty"
                            type="number"
                          />
                           <small class="text-danger">{{ errors[0] }}</small>
                          </validation-provider>
                        </b-form-group>
                        </b-col>
                        <b-col
                          cols="12"
                          lg="2"
                        >
                          <label class="d-inline d-lg-none">السعر</label>
                          <p class="mt-1">
                            {{ item.selling_price * item.qty }} ريال
                          </p>
                        </b-col>
                        <b-col
                          cols="12"
                          lg="5"
                        >
                        <b-form-group
                        label="وصف"
                    :label-for="`item-${index}-description`"
                        >
                          <validation-provider
                      vid="item.description"
                      name="item.description"
                      rules="required"
                      v-slot="{ errors }"
                    >
                          <b-form-textarea
                          :id="`item-${index}-description`"
                          :state="errors.length > 0 ? false : null"
                            v-model="item.description"
                            class="mb-2 mb-lg-0"
                          />
                          <small class="text-danger">{{ errors[0] }}</small>
                          </validation-provider>
                          </b-form-group> 
                        </b-col>
                        <b-col>
                        </b-col>
                      </b-row>
                      <div class="d-flex flex-column justify-content-between border-left py-50 px-25">
                        <feather-icon
                          size="16"
                          icon="XIcon"
                          class="cursor-pointer"
                          @click="removeItem(index)"
                        />
                      </div>
                    </div>
                  </b-col>
                </b-row>
              </div>
              <b-button
                v-ripple.400="'rgba(255, 255, 255, 0.15)'"
                size="sm"
                variant="primary"
                @click="addNewItemInItemForm"
              >
                اضافة منتج/خدمة
              </b-button>
            </b-card-body>

            <!-- Invoice Description: Total -->
            <b-card-body class="invoice-padding pb-0">
              <b-row>
                <!-- Col: Total -->
                <b-col
                  cols="12"
                  md="12"
                  class="mt-md-6 d-flex justify-content-end"
                  order="1"
                  order-md="2"
                >
                  <div class="invoice-total-wrapper">
                    <div class="invoice-total-item">
                      <p class="invoice-total-title">
                       المجموع قبل الضريبة:
                      </p>
                      <p class="invoice-total-amount">
                        {{getInvoiceSubtotal()}} ريال
                      </p>
                    </div>
                    <div class="invoice-total-item">
                      <p class="invoice-total-title">
                        ضريبة:
                      </p>
                      <p class="invoice-total-amount">
                        {{getInvoiceTax() }} ريال (5%)
                      </p>
                    </div>
                    <hr class="my-50">
                    <div class="invoice-total-item">
                      <p class="invoice-total-title">
                        المجموع:
                      </p>
                      <p class="invoice-total-amount">
                         {{getInvoiceTotal()}} ريال
                      </p>
                    </div>
                  </div>
                </b-col>
              </b-row>
            </b-card-body>

            <!-- Spacer -->
            <hr class="invoice-spacing">

            <!-- Note -->
            <b-card-body class="invoice-padding pt-0">
              <span class="font-weight-bold">ملحوظة: </span>
              <b-form-textarea v-model="invoiceData.note" />
            </b-card-body>
          </b-card>
      </b-col>

      <!-- Right Col: Card -->
      <b-col
        cols="12"
        md="4"
        xl="3"
        class="invoice-actions mt-md-0 mt-2"
      >

        <!-- Action Buttons -->
        <b-card>

          <!-- Button: Send Invoice -->
          <!-- <b-button
            v-ripple.400="'rgba(255, 255, 255, 0.15)'"
            variant="primary"
            class="mb-75"
            block
            disabled
          >
            إرسال الفاتورة
          </b-button> -->

          <!-- Button: DOwnload -->
          <!-- <b-button
            v-ripple.400="'rgba(113, 102, 240, 0.15)'"
            variant="outline-primary"
            class="mb-75"
            block
          >
            معاينة
          </b-button> -->

          <!-- Button: Print -->
          <b-button
            v-ripple.400="'rgba(113, 102, 240, 0.15)'"
            variant="outline-primary"
            type="submit"
            block
          >
            حفظ
          </b-button>
        </b-card>

        <!-- Payment Method -->
        <div class="mt-2">
          <b-form-group
            label="قبول الدفع عبر"
            label-for="payment_method"
          >
          <validation-provider
                      vid="payment_method"
                      name="payment_method"
                      rules="required"
                      v-slot="{ errors }"
                    >
            <v-select
            id="payment_method"
              v-model="invoiceData.payment_method"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="paymentMethods"
              label="label"
              input-id="payment_method"
              class="payment-selector"
              :clearable="false"
            /><small class="text-danger">{{ errors[0] }}</small>
</validation-provider>
          </b-form-group>

          <!-- ? Below values are not adding invoiceData to keep invoiceData more generic and less confusing  -->

          <!-- Payment Terms -->
          <!-- <div class="d-flex justify-content-between align-items-center">
            <label for="patymentTerms">شروط الدفع</label>
            <b-form-checkbox
              id="paymentTerms"
              :checked="true"
              switch
            />
          </div> -->

          <!-- Client Notes -->
          <!-- <div class="d-flex justify-content-between align-items-center my-1">
            <label for="clientNotes">ملاحظات العميل</label>
            <b-form-checkbox
              id="clientNotes"
              :checked="true"
              switch
            />
          </div> -->

          <!-- Payment Stub -->
          <!-- <div class="d-flex justify-content-between align-items-center">
            <label for="paymentStub">وصل الدفع</label>
            <b-form-checkbox
              id="paymentStub"
              switch
            />
          </div> -->
        </div>
      </b-col>
    </b-row>
     </b-form>
      </validation-observer>
    <invoice-sidebar-add-new-customer />
  </section>
</template>

<script>
import Logo from '@core/layouts/components/Logo.vue'
import { ref, onUnmounted } from '@vue/composition-api'
import { required, alphaNum, validEmail } from '@validations'
import formValidation from '@core/comp-functions/forms/form-validation'
import { ValidationProvider, ValidationObserver } from 'vee-validate'

import { heightTransition } from '@core/mixins/ui/transition'
import Ripple from 'vue-ripple-directive'
import store from '@/store'
import router from '@/router'
import {
  BRow, BCol, BCard, BCardBody, BButton, BCardText, BForm, BFormGroup, BFormInput, BInputGroup, BInputGroupPrepend, BFormTextarea, BFormCheckbox, BPopover, VBToggle,
} from 'bootstrap-vue'
import vSelect from 'vue-select'
import flatPickr from 'vue-flatpickr-component'
import invoiceStore from '../invoiceStore'
import InvoiceSidebarAddNewCustomer from '../InvoiceSidebarAddNewCustomer.vue'
const moment = require('moment');
export default {
  components: {
    BRow,
    BCol,
    BCard,
    BCardBody,
    BButton,
    BCardText,
    BForm,
    BFormGroup,
    BFormInput,
    BInputGroup,
    BInputGroupPrepend,
    BFormTextarea,
    BFormCheckbox,
    BPopover,
    flatPickr,
    vSelect,
    Logo,
    InvoiceSidebarAddNewCustomer,

    // Form Validation
    ValidationProvider,
    ValidationObserver,
  },
  directives: {
    Ripple,
    'b-toggle': VBToggle,

  },
  mixins: [heightTransition],
  mounted() {
    this.initTrHeight()
  },
  created() {
    window.addEventListener('resize', this.initTrHeight)
  },
  destroyed() {
    window.removeEventListener('resize', this.initTrHeight)
  },
  methods: {
    getInvoiceSubtotal() {
      return this.invoiceData.items.reduce((a, b) => a + b.selling_price * b.qty, 0);
    },
    getInvoiceTax() {
      return this.getInvoiceSubtotal() * 0.05;
    },
    getInvoiceTotal() {
      return this.getInvoiceSubtotal() + this.getInvoiceTax();
    },
    prepareData(){
      let data = {};
      data.total = this.getInvoiceTotal();
          data.subtotal = this.getInvoiceSubtotal();
          data.tax = this.getInvoiceTax();
          data.note = this.invoiceData.note;
          data.payment_terms  = 'الدفع عند الإستلام';
          data.payment_method = this.invoiceData.payment_method.value;
          data.customer_id = this.invoiceData.customer_id
          data.company_id = this.company.id
          data.supply_date = this.invoiceData.supply_date;
          data.due_date = this.invoiceData.due_date;
          data.invoice_date = moment().format('YYYY-MM-DD');
          data.items = this.invoiceData.items.map(item => {
            return {
              item_id: item.item_id,
              selling_price: item.selling_price,
              qty: item.qty,
              description: item.description,
              amount: item.selling_price * item.qty,
              tax: (item.selling_price * item.qty) * 0.05
            }
          });
          return data;
    },
        onSubmit() {
      this.$refs.refFormObserver.validate().then(async (success) => {
          let data = this.prepareData();
            if (success) {
          store.dispatch('app-invoice/addInvoice', data)
            .then((response) => {
                this.$toast.success(response.data.message)
              router.push('/invoice').catch(() => {})
            })
            .catch((err) => {
              if(err.response) {
                if(err.response.status === 422) {
                this.$toast.error(err.response.data.message)
                this.$refs.refFormObserver.setErrors(err.response.data.errors)
                } else {
                this.$toast.error(err.response.data.error)
                }
              }
              console.log(err);
            })
        }
      })
    },
    customerChanged(customer) {
      this.invoiceData.customer = this.customers.find(c => c.id === customer.value);
      this.invoiceData.customer_id = customer.value;
    },
    addNewItemInItemForm() {
      this.$refs.form.style.overflow = 'hidden'
      this.invoiceData.items.push(JSON.parse(JSON.stringify(this.itemFormBlankItem)))

      this.$nextTick(() => {
        this.trAddHeight(this.$refs.row[0].offsetHeight)
        setTimeout(() => {
          this.$refs.form.style.overflow = null
        }, 350)
      })
    },
    removeItem(index) {
      this.invoiceData.items.splice(index, 1)
      this.trTrimHeight(this.$refs.row[0].offsetHeight)
    },
    initTrHeight() {
      this.trSetHeight(null)
      this.$nextTick(() => {
        this.trSetHeight(this.$refs.form.scrollHeight)
      })
    },
  },
  setup() {
    const INVOICE_APP_STORE_MODULE_NAME = 'app-invoice'

    // Register module
    if (!store.hasModule(INVOICE_APP_STORE_MODULE_NAME)) store.registerModule(INVOICE_APP_STORE_MODULE_NAME, invoiceStore)

    // UnRegister on leave
    onUnmounted(() => {
      if (store.hasModule(INVOICE_APP_STORE_MODULE_NAME)) store.unregisterModule(INVOICE_APP_STORE_MODULE_NAME)
    })

    let customers = ref([])
    const res =  store.dispatch('app-invoice/fetchCustomers')
    .then(response => {
      const res = response.data 
      customers.value = res.map(c => ({
        label: c.name, value: c.id, ...c}))
      })
        

  
  
  // Fetch items
   const items = ref([])
    store
      .dispatch('app-invoice/fetchItems')
      .then(response => { 
        const res = response.data
        items.value = res.map(c => ({
        label: c.name, value: c.id, selling_price: c.selling_price, qty: 1, ...c}))
      })

  // Get user company
  const userData = JSON.parse(localStorage.getItem('userData'));
   const company = ref()
   company.value = userData.company;

    const itemFormBlankItem = {
      item: null,
      selling_price: 0,
      qty: 0,
      description: '',
    }

    const blankInvoiceData = {
      id: null,
      customer: null,
      // ? Set single Item in form for adding data
      items: [JSON.parse(JSON.stringify(itemFormBlankItem))],
      payment_terms: '',
      note: 'كان من دواعي سروري العمل معك ومع فريقك.نأمل أن تضعنا في الاعتبار لمشاريع مستقبلية مستقبلية.شكرا!',
      payment_method: null,
    }

    const updateItemForm = (index, val) => {
      const { selling_price, qty, description, id } = val
      invoiceData.value.items[index].item_id = id
      invoiceData.value.items[index].selling_price = selling_price
      invoiceData.value.items[index].qty = qty
      invoiceData.value.items[index].description = description
    }

    const paymentMethods = [
    {
      value: 'cash',
      label: 'نقدا',
    },
    {
      value: 'bank_transfer',
      label: 'تحويل بنكي',
    },
    {
      value: 'check',
      label: 'شيك',
    }
    ]
        const invoiceData = ref(JSON.parse(JSON.stringify(blankInvoiceData)))

    const resetinvoiceData = () => {
      invoiceData.value = JSON.parse(JSON.stringify(blankInvoiceData))
    }
    

    const {
      refFormObserver,
      getValidationState,
      resetForm,
    } = formValidation(resetinvoiceData) 
    return {
      refFormObserver,
      getValidationState,
      resetForm,
      invoiceData,
      customers,
      items,
      company,
      updateItemForm,
      itemFormBlankItem,
      paymentMethods,
    }
  },
}
</script>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';
@import '@core/scss/vue/libs/vue-flatpicker.scss';
.invoice-add-wrapper {
  .add-new-client-header {
    padding: $options-padding-y $options-padding-x;
      color: $success;

    &:hover {
      background-color: rgba($success, 0.12);
    }
  }
}
</style>

<style lang="scss" scoped>
@import "~@core/scss/base/pages/app-invoice.scss";
@import '~@core/scss/base/components/variables-dark';

.form-item-section {
background-color:$product-details-bg;
}

.form-item-action-col {
  width: 27px;
}

.repeater-form {
  // overflow: hidden;
  transition: .35s height;
}

.v-select {
  &.item-selector-title,
  &.payment-selector {
    background-color: #fff;

    .dark-layout & {
      background-color: unset;
    }
  }
}

.dark-layout {
  .form-item-section {
    background-color: $theme-dark-body-bg;

    .row .border {
      background-color: $theme-dark-card-bg;
    }

  }
}
</style>
