<template>
  <div>
    <!-- User Info: Input Fields -->
    <b-form>
      <b-row>

        <!-- Field: Name -->
        <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="اسم"
            label-for="name"
          >
            <b-form-input
              id="name"
              v-model="userData.name"
            />
          </b-form-group>
        </b-col>

        <!-- Field: Email -->
        <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="البريد الإلكتروني"
            label-for="email"
          >
            <b-form-input
              id="email"
              v-model="userData.email"
              type="email"
            />
          </b-form-group>
        </b-col>

        <!-- Field: Status -->
        <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="الحالة"
            label-for="user-status"
          >
            <v-select
              v-model="userData.status"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="statusOptions"
              :reduce="val => val.value"
              :clearable="false"
              input-id="user-status"
            />
          </b-form-group>
        </b-col>

        <!-- Field: Role -->
        <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="دور المستخدم"
            label-for="user-role"
          >
            <v-select
              v-model="userData.role"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="roleOptions"
              :reduce="val => val.value"
              :clearable="false"
              input-id="user-role"
            />
          </b-form-group>
        </b-col>

        <!-- Field: Email -->
        <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="رقم الهاتف"
            label-for="mobile"
          >
            <b-form-input
              id="mobile"
              v-model="userData.mobile"
            />
          </b-form-group>
        </b-col>
<!-- extra fields -->
          <%=#each data.form_fields %>
          <%=#ifEquals type 'text' %>
          <b-col
          cols="12"
          md="4"
        >
          <b-form-group
            label="<%= label %>"
            label-for="<%= name %>"
          >
            <b-form-input
              id="<%= name %>"
              v-model="userData.<%= name %>"
            />
          </b-form-group>
          </b-col>
          <%=/ifEquals %>
          <%=/each %>
      </b-row>
    </b-form>

    <!-- PERMISSION TABLE -->
    <b-card
      no-body
      class="border mt-1"
    >
      <b-card-header class="p-1">
        <b-card-title class="font-medium-2">
          <feather-icon
            icon="LockIcon"
            size="18"
          />
          <span class="align-middle ml-50">الأذونات</span>
        </b-card-title>
      </b-card-header>
      <b-table
        striped
        responsive
        class="mb-0"
        :items="permissionsData"
        :fields="fields"
      >
        <template #cell(module)="data">
          {{ data.value }}
        </template>
        <template #cell()="data">
          <b-form-checkbox :checked="data.value" />
        </template>
      </b-table>
    </b-card>

    <!-- Action Buttons -->
    <b-button
      variant="primary"
      class="mb-1 mb-sm-0 mr-0 mr-sm-1"
      :block="$store.getters['app/currentBreakPoint'] === 'xs'"
    >
      حفظ التغييرات
    </b-button>
    <b-button
      variant="outline-secondary"
      type="reset"
      :block="$store.getters['app/currentBreakPoint'] === 'xs'"
    >
      إعادة ضبط
    </b-button>
  </div>
</template>

<script>
import {
  BButton, BMedia, BAvatar, BRow, BCol, BFormGroup, BFormInput, BFormInvalidFeedback, BForm, BTable, BCard, BCardHeader, BCardTitle, BFormCheckbox,
} from 'bootstrap-vue'
import { avatarText } from '@core/utils/filter'
import vSelect from 'vue-select'
import { useInputImageRenderer } from '@core/comp-functions/forms/form-utils'
import { ref } from '@vue/composition-api'
import useUsersList from '../users-list/useUsersList'
import { ValidationProvider, ValidationObserver } from 'vee-validate';
import { required, alphaNum, validEmail } from '@validations';
import formValidation from '@core/comp-functions/forms/form-validation';

export default {
  components: {
    BButton,
    BMedia,
    BAvatar,
    BRow,
    BCol,
    BFormGroup,
    BFormInput,
    BFormInvalidFeedback,
    BForm,
    BTable,
    BCard,
    BCardHeader,
    BCardTitle,
    BFormCheckbox,
    vSelect,
    // Form Validation
    ValidationProvider,
    ValidationObserver,
  },
  props: {
    userData: {
      type: Object,
      required: true,
    }
  },
  setup(props) {
    const { resolveUserRoleVariant } = useUsersList()

    const roleOptions = [
     <%=#each data.roles %>
        <%=#unless hidden %>
        { label: '<%= label %>', value: '<%= value %>' },
        <%=/unless %>
    <%=/each %>
    ]

    const statusOptions = [
    <%=#each data.statuses %>
      { label: '<%= label %>', value: '<%= value %>' },
    <%=/each %>
    ]

const fields = [
      {
        key: 'module',
        label: 'الوحدة',
      },
      {
        key: 'read',
        label: 'قراءة',
      },
      {
        key: 'write',
        label: 'كتابة',
      },
      {
        key: 'create',
        label: 'إنشاء',
      },
      {
        key: 'delete',
        label: 'حذف',
      },
    ];
    const permissionsData = [
      {
        module: 'المستخدمين',
        read: true,
        write: false,
        create: false,
        delete: false,
      },
      {
        module: 'العملاء',
        read: false,
        write: true,
        create: false,
        delete: false,
      },
      {
        module: 'إدارة العقود',
        read: true,
        write: false,
        create: true,
        delete: false,
      },
      {
        module: 'إدارة المالية',
        read: false,
        write: false,
        create: false,
        delete: false,
      }
    ];
  
  
    // ? Demo Purpose => Update image on click of update
    const refInputEl = ref(null)
    const previewEl = ref(null)

    // const { inputImageRenderer } = useInputImageRenderer(refInputEl, base64 => {
    //   // eslint-disable-next-line no-param-reassign
    //   props.userData.avatar = base64
    // })
    const oldUserData = JSON.parse(JSON.stringify(props.userData));
    const resetuserData = () => {
      userData.value = JSON.parse(JSON.stringify(oldUserData));
    };

    const { refFormObserver, getValidationState, resetForm } =
      formValidation(resetuserData);

    return {
      resolveUserRoleVariant,
      avatarText,
      roleOptions,
      statusOptions,
      fields,
      permissionsData,

      //  ? Demo - Update Image on click of update button
      refInputEl,
      previewEl,
      refFormObserver,
      getValidationState,
      resetForm,
    }
  },
}
</script>

<style lang="scss">
@import '@core/scss/vue/libs/vue-select.scss';
</style>
