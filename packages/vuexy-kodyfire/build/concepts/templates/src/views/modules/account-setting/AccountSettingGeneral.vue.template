<template>
 <b-card>
    <b-form class="mt-2">
      <b-row>
        <b-col
          cols="12"
          md="12"
        >
          <b-alert
            v-model="showMessage"
            dismissible
            :variant="messageType"
          >
            <div class="alert-body">
              <feather-icon
                class="mr-25"
                icon="InfoIcon"
              />
              <span
                class="ml-25"
                v-html="message"
              />
            </div>
          </b-alert>
        </b-col>
      </b-row>
      <!-- media -->
      <b-media no-body>
        <b-media-aside>
          <b-link>
            <b-img
              v-if="optionsLocal.logo"
              ref="previewEl"
              rounded
              :src="optionsLocal.logo"
              height="80"
            />
            <b-img
              v-if="!optionsLocal.logo"
              ref="previewEl"
              rounded
              src="/logo-placeholder.png"
              height="80"
            />
          </b-link>
        <!--/ avatar -->
        </b-media-aside>

        <b-media-body class="mt-75 ml-75">
          <!-- upload button -->
          <b-button
            v-ripple.400="'rgba(255, 255, 255, 0.15)'"
            variant="primary"
            size="sm"
            class="mb-75 mr-75"
            @click="$refs.refInputEl.$el.click()"
          >
            تحميل
          </b-button>
          <b-form-file
            ref="refInputEl"
            v-model="profileFile"
            accept=".jpg, .png, .gif"
            :hidden="true"
            plain
            @input="inputImageRenderer"
          />
          <!--/ upload button -->

          <!-- reset -->
          <b-button
            v-ripple.400="'rgba(186, 191, 199, 0.15)'"
            variant="outline-secondary"
            size="sm"
            class="mb-75 mr-75"
          >
            إعادة ضبط
          </b-button>
          <!--/ reset -->
          <b-card-text>السيغة المسموح بها JPG أو GIF أو PNG.بحد أقصى 2 ميجابايت</b-card-text>
        </b-media-body>
      </b-media>
      <!--/ media -->
        
      <!-- form -->
      <b-row class="mt-2">
        <%=#each form_fields %>
        <b-col
          cols="12"
          md="6"
          lg="6"
        >
        <!-- Field: <%= name %> -->
        <b-form-group
            label="<%= label %>"
            label-for="<%= dasherize name %>"
          >
        <%=#ifEquals type 'dateTime' %>
            <flat-pickr
              v-model="<%= ../../name %>Data.<%= name %>"
              class="form-control"
              :config="{ dateFormat: 'Y-m-d'}"
              placeholder="YYYY-MM-DD"
            />
          <%=/ifEquals %>
          <%=#ifEquals type 'text' %>
            <b-form-input
              id="<%= dasherize name %>"
              v-model="<%= ../../name %>Data.<%= name %>"
            />
          <%=/ifEquals %>
          <%=#ifEquals type 'select' %>
            <v-select
              v-model="<%= ../../name %>Data.<%= name %>"
              :dir="$store.state.appConfig.isRTL ? 'rtl' : 'ltr'"
              :options="<%= option%>Options"
              :clearable="false"
              input-id="<%= dasherize name %>"
            />
          <%=/ifEquals %>
          <%=#ifEquals type 'radio' %>
            <b-form-radio-group
              id="<%= dasherize name %>"
              v-model="<%= ../../name %>Data.<%= name %>"
              :options="<%= option%>Options"
              value="male"
            />
          <%=/ifEquals %>
           <%=#ifEquals type 'checkbox' %>
            <b-form-checkbox-group
              id="<%= dasherize name %>"
              v-model="<%= ../../name %>Data.<%= name %>"
              :options="<%= option%>Options"
            />
            <%=/ifEquals %>
          </b-form-group>
        </b-col>
         <%=/each%>
      </b-row>

        <b-col cols="12">
          <b-button
            v-ripple.400="'rgba(255, 255, 255, 0.15)'"
            variant="primary"
            class="mt-2 mr-1"
          >
            حفظ التغييرات
          </b-button>
          <b-button
            v-ripple.400="'rgba(186, 191, 199, 0.15)'"
            variant="outline-secondary"
            type="reset"
            class="mt-2"
            @click.prevent="resetForm"
          >
            إعادة ضبط
          </b-button>
        </b-col>
      </b-row>
    </b-form>
  </b-card>
</template>

<script>
import {
  BFormFile, BButton, BForm, BFormGroup, BFormInput, BRow, BCol, BAlert, BCard, BCardText, BMedia, BMediaAside, BMediaBody, BLink, BImg,
} from 'bootstrap-vue'
import Ripple from 'vue-ripple-directive'
import { useInputImageRenderer } from '@core/comp-functions/forms/form-utils'
import { ref } from '@vue/composition-api'
import { alertMessageMixin } from '@core/mixins/ui/feedback'
import ToastificationContent from '@core/components/toastification/ToastificationContent.vue'

export default {
  components: {
    BButton,
    BForm,
    BImg,
    BFormFile,
    BFormGroup,
    BFormInput,
    BRow,
    BCol,
    BAlert,
    BCard,
    BCardText,
    BMedia,
    BMediaAside,
    BMediaBody,
    BLink,
  },
  props: {

    generalData: {
      type: Object,
      default: () => {},
    },
  },
  mixins: [alertMessageMixin],
  directives: {
    Ripple,
  },
  props: {
    <%=#each options %>
    <%= option %>Data: {
      type: Object,
      default: () => {},
    },
    <%=/each%>
  },
  data() {
    return {
      optionsLocal: JSON.parse(JSON.stringify(this.generalData)),
      profileFile: null,
    }
  },
  methods: {
     update<%= capitalize name %>() {
      this.$http.put(`/api/<%= name %>/${this.<%= name %>Data.id}`, this.<%= name %>Data).then(response => {
        console.log(response)
        this.$toast.success(response.data.message)
        // router.push("/user").catch(() => {});
      })
        .catch(err => {
          if (err.response) {
            if (err.response.status === 422) {
              this.$toast.error(err.response.data.message)
              const { message, errors } = err.response.data
              if (errors) {
                const errorMessage = {
                  message: '',
                  type: 'danger',
                }
                Object.values(errors).forEach(error => {
                  errorMessage.message += `${error[0]}<br>`
                })
                this.displayMessage(errorMessage)
              }
              this.$toast({
                component: ToastificationContent,
                props: {
                  title: message,
                  text: message,
                  icon: 'AlertCircleIcon',
                  variant: 'danger',
                },
              })
            } else {
              this.$toast.error(err.response.data.error)
            }
          }
          console.log(err)
        })
    },
    resetForm() {
      this.optionsLocal = JSON.parse(JSON.stringify(this.generalData))
    },
  },
  setup() {
    const refInputEl = ref(null)
    const previewEl = ref(null)

    const { inputImageRenderer } = useInputImageRenderer(refInputEl, previewEl)

    return {
      refInputEl,
      previewEl,
      inputImageRenderer,
    }
  },
}
</script>
