<?php
namespace {{namespace}};
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Log;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\Request;
use App\Http\Requests\Create{{name}}Request;
use App\Http\Requests\Update{{name}}Request;
use App\Storage\DataBag;
use App\Models\\{{name}};
use App\Repositories\\{{name}}Repository;
{{#each controller.dependencies }}
use {{this}};
{{/each}}

class {{name}}Controller extends Controller
{
    {{#ifEquals controller.routeType 'resource'}}
    /**
    * Display a listing of the resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function index(Request  $request)
    {
        if (!$request->has('pagination')) {
            $data = {{name}}::all();
        } else {
            $pageSize = $request->query('pageSize');
            $currentPage = $request->query('currentPage');
            $search = $request->query('q');
            Paginator::currentPageResolver(function () use ($currentPage) {
                return $currentPage;
            });
            $data = {{ capitalize name }}::paginate($pageSize);
            if ($search != "") {
                $data = {{ capitalize name }}::search($search)->paginate($pageSize);
            }
        }
        try {
        } catch (\Throwable $th) {
            Log::error($th->getMessage());
            return response()->json([
                'error' => __('app.errorMsg'),
            ], 500);
        }
        return response()->json(['data' => $data]);
    }
    /**
    * Store a newly created resource in storage.
    *
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function store(Create{{name}}Request $request, {{name}}Repository $repository)
    {
        $data = new DataBag(['data' => $request->all()]);
        try {
            $model = $repository->create($data);
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return response()->json([
                'error' => $e->getMessage(),
            ], 500);
        }
        $message = trans('app.createSuccessMsg');
        return response()->json(['data' => $model, 'message' => $message, 'success' => true]);
    }
    /**
    * Display the specified resource.
    *
    * @param  \App\Models\Menu  $menu
    * @return \Illuminate\Http\Response
    */
    public function show({{name}} ${{lowercase name}})
    {
    try {
        $data = ${{lowercase name}};
    } catch (\Throwable $th) {
            Log::error($th->getMessage());
        return response()->json([
            'error' => __('app.errorMsg'),
        ], 500);
    }
    return response()->json(['data' => $data]);
    }
    /**
    * Update the specified resource in storage.
    *
    * @param  \Illuminate\Http\Request  $request
    * @param  \App\Models\{{name}}  $model
    * @return \Illuminate\Http\Response
    */
    public function update(Update{{name}}Request $request, {{name}} ${{lowercase name}}, {{name}}Repository $repository)
    {
        $data = new DataBag(['data' => $request->all()]);
        try {
            $model = $repository->update(${{lowercase name}}, $data);
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return response()->json([
                'error' => $e->getMessage(),
            ], 500);
        }
        $message = trans('app.updateSuccessMsg');
        return response()->json(['data' => $model, 'message' => $message, 'success' => true]);
    }
    /**
    * Remove the specified resource from storage.
    *
    * @param  \App\Models\{{name}}  $model
    * @return \Illuminate\Http\Response
    */
    public function destroy ({{name}} ${{lowercase name}})
    {
    try {
        ${{lowercase name}}->delete();
    } catch (\Exception $e) {
        Log::error($e->getMessage());
            return response()->json([
        'error' => __('app.errorMsg'),
        ], 500);
    }
    $message = trans('app.deleteSuccessMsg');
    return response()->json(['message' => $message], 200);
    }
    {{else}}
    {{{ methods }}}
    {{/ifEquals}}
}
    